//
//  PhotosViewController.swift
//  PhotosApp
//
//  Created by Allison Lindner on 28/07/20.
//  Copyright (c) 2020 Allison Lindner. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol PhotosDisplayLogic: class {
	func displayPhotos(viewModel: Photos.Data.ViewModel)
	func displayFullPhoto(viewModel: Photos.Full.ViewModel)
}

class PhotosViewController: UIViewController, PhotosDisplayLogic, UICollectionViewDelegate, UICollectionViewDataSource {
	@IBOutlet weak var collectionView: UICollectionView!
	
	var interactor: PhotosBusinessLogic?
	var router: (NSObjectProtocol & PhotosRoutingLogic & PhotosDataPassing)?
	
	var photosId: [Int:Int] = [:]
	var images: [Int:UIImage] = [:]
	
	private var currentPage = 1
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = PhotosInteractor()
		let presenter = PhotosPresenter()
		let router = PhotosRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		collectionView.register(PhotoCollectionViewCell.self, forCellWithReuseIdentifier: "photoCell")
		
		collectionView.delegate = self
		collectionView.dataSource = self
		
		fetch()
	}
	
	// MARK: Do something
	
	//@IBOutlet weak var nameTextField: UITextField!
	
	func fetch() {
		let request = Photos.Data.Request(count: currentPage)
		interactor?.getMorePhotos(request: request)
	}
	
	func displayPhotos(viewModel: Photos.Data.ViewModel) {
		self.photosId = viewModel.photosId
		self.images = viewModel.images
		
		DispatchQueue.main.async {
			self.collectionView.reloadData()
		}
	}
	
	func displayFullPhoto(viewModel: Photos.Full.ViewModel) {
		self.interactor?.setPhoto(url: viewModel.url)
		self.performSegue(withIdentifier: "FullPhoto", sender: nil)
	}
	
	// MARK: CollectionView
	
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return photosId.count
	}
	
	func numberOfSections(in collectionView: UICollectionView) -> Int {
		return 1
	}
	
	func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
		if indexPath.row == photosId.count - 4 {
			currentPage += 1
			fetch()
		}
		
		if let cell = cell as? PhotoCollectionViewCell {
			if indexPath.row < images.count {
				cell.setup(withImage: images[photosId[indexPath.row]!]!)
			}
		}
	}
	
	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		let request = Photos.Full.Request(id: photosId[indexPath.row]!)
		self.interactor?.showFullPhoto(request: request)
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "photoCell", for: indexPath) as! PhotoCollectionViewCell
		cell.prepareForReuse()
		
		if indexPath.row < images.count {
			cell.setup(withImage: images[photosId[indexPath.row]!]!)
		}
		
		return cell
	}
}
